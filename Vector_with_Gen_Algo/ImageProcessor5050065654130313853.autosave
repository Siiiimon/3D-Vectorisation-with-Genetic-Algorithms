public class ImageProcessor {

    private OpenCV opencv;
    private PApplet app;
     

    public ImageProcessor(PApplet app) {
        this.app = app;
    }

    private PImage addBorder(PImage in) {
        PImage img = createImage(box_size, box_size, RGB);

        img.loadPixels();
        in.loadPixels();

        int tmpX = (box_size - in.width) / 2;
        int tmpY = (box_size - in.height) / 2;
        for (int x = 0; x < src.width; x++) {
            for (int y = 0; y < src.height; y++) {
                img.pixels[ y * box_size + x] = in.pixels[y * box_size + x];
            }
        }
        img.updatePixels();

        return img;
    }

    public PImage getCanny(PImage src, short box_size) {
        if (src.width > src.height)
            src.resize(box_size, 0);
        else
            src.resize(0, box_size);

        if (opencv == null || src.width != opencv.width || src.height != opencv.height)
            opencv = new OpenCV(app, src);
        else
            opencv.loadImage(src);

        opencv.blur(3);
        opencv.findCannyEdges(int(0xFF * 0.30), int(0xFF * 0.50));

        /*
        PGraphics pg = createGraphics(box_size / displayDensity(), box_size / displayDensity(), P2D);
        pg.beginDraw();
        pg.background(0);
        pg.scale(1.0 / displayDensity());
        pg.translate(box_size/2, box_size/2);
        pg.image(opencv.getSnapshot(), -src.width/2,-src.height/2);
        pg.endDraw();

        return pg;*/
        return addBorder(opencv.getSnapshot());
/*
        return pg.get();
        
        return opencv.getSnapshot();
        */
    }
}